{"version":3,"sources":["actions/colorAction.js","getRandomColor.js","reducers/colorReducer.js","amount.js","actions/orientationAction.js","reducers/orientationReducer.js","reducers/index.js","store.js","components/ColorSquare.js","App.js","serviceWorker.js","index.js"],"names":["CHANGE_COLORS","changeColors","type","getRandomColor","color","i","Math","floor","random","getColors","colors","Array","fill","forEach","key","initialState","toggleOrientation","row","orientation","state","action","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","ColorSquare","style","backgroundColor","flex","className","connect","dispatch","bindActionCreators","handleChangeColors","handleToggleOrientation","tabIndex","outline","height","width","display","flexDirection","overflow","onKeyPress","onClick","map","item","Boolean","location","hostname","match","ReactDOM","render","store","createStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAAaA,EAAgB,gBAEhBC,EAAe,iBAAO,CAAEC,KAAMF,ICO5BG,EATQ,WAGnB,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,GAHU,mBAGOE,KAAKC,MAAsB,GAAhBD,KAAKE,WAErC,OAAOJ,G,4NCFX,IAAMK,EAAY,WACd,IAAMC,EAAS,IAAIC,MCLR,KDKsBC,KAAK,GAItC,OAHAF,EAAOG,QAAQ,SAACT,EAAOU,GACnBJ,EAAOI,GAAOX,MAEXO,GAGLK,EAAe,CAAEL,OAAQD,KEZxB,IAEMO,EAAoB,iBAAO,CAAEd,KAFR,uB,mjBCElC,IAAMa,EAAe,CAAEE,KAAK,GAWbC,EATK,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAClD,OAAQA,EAAOlB,MACX,IDN0B,qBCOtB,OAAO,KAAKiB,EAAZ,CAAmBF,KAAME,EAAMF,MACnC,QACI,OAAOE,ICHJE,EAFKC,YAAgB,CAAElB,MJUvB,WAA8C,IAA/Be,EAA8B,uDAAtBJ,EAClC,QADwD,wCACzCb,MACX,KAAKF,EACD,O,qVAAO,CAAP,GAAYmB,EAAZ,CAAmBT,OAAQD,MAC/B,QACI,OAAOU,IIf0BD,gBCAvCK,EAAmBC,OAAOC,sCAAwCC,I,gBCAzDC,EAFK,SAAC,GAAD,IAAGvB,EAAH,EAAGA,MAAH,OAAe,yBAAKwB,MAAO,CAAEC,gBAAiBzB,EAAO0B,KAAM,GAAKC,UAAU,kBC6B/EC,cAPS,SAAAb,GAAK,MAAK,CAC9BT,OAAQS,EAAMf,MAAMM,OACpBO,IAAKE,EAAMD,YAAYD,MAGA,SAAAgB,GAAQ,OAAIC,YAAmB,CAAEC,mBAAoBlC,EAAcmC,wBAAyBpB,GAAqBiB,IAE7HD,CArBH,SAAC,GAAD,IAAGtB,EAAH,EAAGA,OAAQyB,EAAX,EAAWA,mBAAoBC,EAA/B,EAA+BA,wBAAyBnB,EAAxD,EAAwDA,IAAxD,OACR,yBAAKoB,SAAU,EAAGT,MAAO,CAAEU,QAAS,OAAQC,OAAQ,QAASC,MAAO,OAAQC,QAAS,OAAQC,cAAezB,EAAM,MAAQ,SAAU0B,SAAU,UAAYC,WAAYT,EAAoBU,QAAST,EAAyBL,UAAU,OACjO,IAAIpB,MNZE,KMYYC,KAAK,GAAGkC,IAAI,SAACC,EAAMjC,GAAP,OAC3B,kBAAC,EAAD,CAAaA,IAAKA,EAAKV,MAAOM,EAAOI,UCD7BkC,QACa,cAA7BxB,OAAOyB,SAASC,UAEa,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACrB,2DCVRC,IAASC,OACL,kBAAC,IAAD,CAAUC,MJFIC,YACVlC,EACAE,MICA,kBAAC,EAAD,OAEJiC,SAASC,eAAe,SDqHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAC/BA,EAAaC,iB","file":"static/js/main.a900224e.chunk.js","sourcesContent":["export const CHANGE_COLORS = \"CHANGE_COLORS\";\r\n\r\nexport const changeColors = () => ({ type: CHANGE_COLORS });","const getRandomColor = () => {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n\r\nexport default getRandomColor;","import { CHANGE_COLORS } from \"../actions/colorAction\";\r\nimport getRandomColor from \"../getRandomColor\";\r\nimport amount from \"../amount\";\r\n\r\nconst getColors = () => {\r\n    const colors = new Array(amount).fill(0);\r\n    colors.forEach((color, key) => {\r\n        colors[key] = getRandomColor();\r\n    });\r\n    return colors;\r\n}\r\n\r\nconst initialState = { colors: getColors() };\r\n\r\nexport default function color(state = initialState, action) {\r\n    switch (action.type) {\r\n        case CHANGE_COLORS:\r\n            return { ...state, colors: getColors() };\r\n        default:\r\n            return state;\r\n    }\r\n}","export default 100;","export const TOGGLE_ORIENTATION = \"TOGGLE_ORIENTATION\";\r\n\r\nexport const toggleOrientation = () => ({ type: TOGGLE_ORIENTATION });","import { TOGGLE_ORIENTATION } from \"../actions/orientationAction\";\r\n\r\nconst initialState = { row: true };\r\n\r\nconst orientation = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TOGGLE_ORIENTATION:\r\n            return { ...state, row: !state.row };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default orientation;","import { combineReducers } from \"redux\";\r\nimport color from \"./colorReducer\";\r\nimport orientation from \"./orientationReducer\";\r\n\r\nconst rootReducer = combineReducers({ color, orientation });\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport { compose } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore() {\r\n    const store = createStore(\r\n        rootReducer,\r\n        composeEnhancers()\r\n    );\r\n\r\n    return store;\r\n}","import React from \"react\";\r\n\r\nconst ColorSquare = ({ color }) => <div style={{ backgroundColor: color, flex: 1 }} className=\"color-square\" />\r\n\r\nexport default ColorSquare;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport \"./App.css\";\r\nimport { changeColors } from \"./actions/colorAction\";\r\nimport ColorSquare from \"./components/ColorSquare\";\r\nimport { toggleOrientation } from \"./actions/orientationAction\";\r\nimport amount from \"./amount\";\r\n\r\nconst App = ({ colors, handleChangeColors, handleToggleOrientation, row }) =>\r\n    <div tabIndex={0} style={{ outline: \"none\", height: \"100vh\", width: \"100%\", display: \"flex\", flexDirection: row ? \"row\" : \"column\", overflow: \"hidden\" }} onKeyPress={handleChangeColors} onClick={handleToggleOrientation} className=\"App\">\r\n        {new Array(amount).fill(0).map((item, key) =>\r\n            <ColorSquare key={key} color={colors[key]} />\r\n        )}\r\n    </div>\r\n\r\nApp.propTypes = {\r\n    colors: PropTypes.array.isRequired,\r\n    handleChangeColors: PropTypes.func.isRequired,\r\n    handleToggleOrientation: PropTypes.func.isRequired,\r\n    row: PropTypes.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    colors: state.color.colors,\r\n    row: state.orientation.row\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({ handleChangeColors: changeColors, handleToggleOrientation: toggleOrientation }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won\"t work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let\"s check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It\"s the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can\"t reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\"\r\nimport configureStore from \"./store\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Provider store={configureStore()}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}